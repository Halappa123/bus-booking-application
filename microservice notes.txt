         
                                MICROSERVICE :

             MICROSERVICE- also known as the microservice architecture - is an architectural style that structures an application 
                              as a collection of services that are:
                             Independently deployable
                             Loosely coupled
                             Organized around business capabilities
                             Owned by a small team
                            The microservice architecture enables an organization to deliver large, 
                            complex applications rapidly, frequently, reliably and sustainably - 
                            a necessity for competing and winning in todayâ€™s world.

2023-11-24 17:17:25.480  INFO 21960 --- [ctor-http-nio-3] c.z.a.loggingfilter.LoggingFilter        :  Path of the request received -> /user-api/user_login/halappanm28@gmail.com/Hnm@1234 


CIRCUIT BREAKER :is implemented when services become slow we can give fall back resonse about the service.

resilience4j.retry.instances.sample-api.maxAttempts=5 #NEW
#resilience4j.retry.instances.sample-api.maxRetryAttempts=5 #OLD


  1) Service Communication protocals :

     RESTful APIs, GraphQL, or message queues (e.g., RabbitMQ, Apache Kafka).

    * RESTful APIs -->its representational state transfer(REST) that uses stateless communication protocal over HTTP

                   -->commanly uses JSON as a dataformat.

                   -->its a request and response model . client  request for a specific endpoints (urls) perform operation
                      and respond with data.


    * GraphQL -->GraphQL is a query language for APIs and a runtime for executing those queries with existing data.

              -->Typically uses the JSON for the data exchange.

              -->Request and Response model client can request exactlty and server response with data in json .

              -->more flexibility over the response data while fetching them can be reduce over-fetching .


    * Communication Style: Message queues are based on the publish-subscribe or message-broker pattern, 
                           allowing asynchronous communication between different components.


